local httpService = game:GetService('HttpService')

local SaveManager = {} do
    SaveManager.Folder = 'LinoriaLibSettings'
    SaveManager.Ignore = {}
    SaveManager.Parser = {
        Toggle = {
            Save = function(idx, object) 
                return { type = 'Toggle', idx = idx, value = object.Value } 
            end,
            Load = function(idx, data)
                if Toggles[idx] then 
                    Toggles[idx]:SetValue(data.value)
                else
                    warn("Toggle index not found:", idx)
                end
            end,
        },
        Slider = {
            Save = function(idx, object)
                return { type = 'Slider', idx = idx, value = tostring(object.Value) }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue(data.value)
                else
                    warn("Slider index not found:", idx)
                end
            end,
        },
        Dropdown = {
            Save = function(idx, object)
                return { type = 'Dropdown', idx = idx, value = object.Value, multi = object.Multi }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue(data.value)
                else
                    warn("Dropdown index not found:", idx)
                end
            end,
        },
        ColorPicker = {
            Save = function(idx, object)
                return { type = 'ColorPicker', idx = idx, value = object.Value:ToHex(), transparency = object.Transparency }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValueRGB(Color3.fromHex(data.value), data.transparency)
                else
                    warn("ColorPicker index not found:", idx)
                end
            end,
        },
        KeyPicker = {
            Save = function(idx, object)
                return { type = 'KeyPicker', idx = idx, mode = object.Mode, key = object.Value }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue({ data.key, data.mode })
                else
                    warn("KeyPicker index not found:", idx)
                end
            end,
        },
        Input = {
            Save = function(idx, object)
                return { type = 'Input', idx = idx, text = object.Value }
            end,
            Load = function(idx, data)
                if Options[idx] and type(data.text) == 'string' then
                    Options[idx]:SetValue(data.text)
                else
                    warn("Input index not found or invalid data:", idx)
                end
            end,
        },
    }

    function SaveManager:SetIgnoreIndexes(list)
        for _, key in next, list do
            self.Ignore[key] = true
        end
    end

    function SaveManager:SetFolder(folder)
        self.Folder = folder
        self:BuildFolderTree()
    end

    function SaveManager:Save(name)
        if not name or name:match("^%s*$") then
            return false, 'Invalid config name (empty or whitespace only)'
        end

        local fullPath = self.Folder .. '/settings/' .. name .. '.json'
        self:BuildFolderTree() -- Ensure the folder structure exists

        local data = { objects = {} }
        for idx, toggle in next, Toggles do
            if not self.Ignore[idx] then
                table.insert(data.objects, self.Parser[toggle.Type].Save(idx, toggle))
            end
        end

        for idx, option in next, Options do
            if not self.Ignore[idx] and self.Parser[option.Type] then
                table.insert(data.objects, self.Parser[option.Type].Save(idx, option))
            end
        end

        local success, encoded = pcall(httpService.JSONEncode, httpService, data)
        if not success then
            warn("Failed to encode data:", encoded)
            return false, 'Failed to encode data'
        end

        writefile(fullPath, encoded)
        return true
    end

    function SaveManager:Load(name)
        if not name or name:match("^%s*$") then
            return false, 'Invalid config name (empty or whitespace only)'
        end

        local file = self.Folder .. '/settings/' .. name .. '.json'
        if not isfile(file) then
            warn("File not found:", file)
            return false, 'Invalid file'
        end

        local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
        if not success then
            warn("Failed to decode file:", decoded)
            return false, 'Decode error'
        end

        for _, option in next, decoded.objects do
            if self.Parser[option.type] then
                task.spawn(function()
                    self.Parser[option.type].Load(option.idx, option)
                end)
            else
                warn("Unknown parser type:", option.type)
            end
        end

        return true
    end

    function SaveManager:BuildFolderTree()
        local paths = { self.Folder, self.Folder .. '/themes', self.Folder .. '/settings' }
        for _, path in ipairs(paths) do
            if not isfolder(path) then
                makefolder(path)
            end
        end
    end

    function SaveManager:RefreshConfigList()
        local list = listfiles(self.Folder .. '/settings')
        local out = {}
        for _, file in ipairs(list) do
            if file:sub(-5) == '.json' then
                table.insert(out, file:match("([^/\\]+)%.json$"))
            end
        end
        return out
    end

    function SaveManager:LoadAutoloadConfig()
        local autoloadPath = self.Folder .. '/settings/autoload.txt'
        if isfile(autoloadPath) then
            local name = readfile(autoloadPath):gsub("\n", "")
            local success, err = self:Load(name)
            if not success then
                warn("Failed to load autoload config:", err)
                self.Library:Notify('Failed to load autoload config: ' .. err)
            else
                self.Library:Notify('Auto-loaded config: ' .. name)
            end
        end
    end
end

return SaveManager
